<ui:composition template="../template.xhtml" xmlns="http://www.w3.org/1999/xhtml"
                xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
                xmlns:f="http://xmlns.jcp.org/jsf/core" xmlns:t="http://tornadofaces.io/ui"
                xmlns:h="http://xmlns.jcp.org/jsf/html">
    <f:metadata>
        <f:viewAction action="#{docsController.loadTag('slider')}" />
    </f:metadata>

    <ui:define name="content">
        <div class="box">
        <h1 class="subheader">Slider</h1>
        <div>

        <p><h:outputText value="#{docsController.tag.description}" escape="false"/></p>

        <p>In addition to value change events, you can also bind the lower or upper track values to other input elements via <code>lowerTarget</code> and <code>upperTarget</code></p>
        <ui:include src="slider.xhtml"/>

        </div></div>
        
        <t:tabView styleClass="documentation" contentsStyleClass="documentation-contents box">
            <t:tab title="list.xhtml">
<pre class="line-numbers"><code class="language-markup">
&lt;t:slider min="0" max="100" step="1" lower="#{docsController.expr('controller.numberValue')}" connect="lower" />

&lt;t:slider min="0" max="100" step="10" lower="#{docsController.expr('controller.min')}" upper="#{docsController.expr('controller.max')}" connect="true" /></code></pre>
            </t:tab>
            <t:tab title="Documentation" styleClass="doctab">
                <ui:include src="../tag-documentation.xhtml"/>

                <h5>Client Side formatting</h5>

                <p>You can format the <code>min</code>, <code>max</code> and <code>value</code> labels in the header by referencing a JavaScript function in the <code>labelFormatter</code> property.
                This method will be called with the following arguments:</p>
                <ul>
                    <li><strong>type</strong> One of 'min', 'max' or 'value'</li>
                    <li><strong>label</strong> The corresponding span or h4 you must apply the value to</li>
                    <li><strong>value</strong> The value the label should now reflect. The value will be an array in case both lower and upper is used, or just an int if just lower is used.</li>
                    <li><strong>widget</strong> The slider widget. Can be used to extract or set further information about the labels.</li>
                </ul>

                <h5>Client Side Callbacks</h5>
                <p><code>onSlide</code> is called as a slider value changes.</p>
                <pre><code class="language-javascript">function onSlide(slider, value) {
    // The value will be an array if upper is used, int otherwise.
}</code></pre>
                <h5>Ajax Behavior Events</h5>
                <p><code>change</code> will be called when a slider value is changed
                </p>
                <pre><code class="language-markup">&lt;t:slider>
    &lt;f:ajax event="change" listener="#{docsController.expr('controller.changed')}">
&lt;/t:slider></code></pre>
                <pre><code class="language-java">public void onChange(SliderValueEvent event) {
    Slider slider = event.getSlider();
}</code></pre>
                <p>The listener will be called with an instance of <code>io.tornadofaces.event.SliderEvent</code> that contains a reference to the slider.</p>
            </t:tab>
        </t:tabView>

    </ui:define>
</ui:composition>