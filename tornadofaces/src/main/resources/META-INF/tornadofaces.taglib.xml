<facelet-taglib version="2.2"
                xmlns="http://xmlns.jcp.org/xml/ns/javaee"
                xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-facelettaglibrary_2_2.xsd">
    <namespace>http://tornadofaces.io/ui</namespace>
    <tag>
        <description>Grid Container</description>
        <tag-name>grid-container</tag-name>
        <component>
            <component-type>io.tornadofaces.component.GridContainer</component-type>
            <renderer-type>io.tornadofaces.component.GridComponentRenderer</renderer-type>
        </component>
        <attribute>
            <description>Styles to apply to the ul element.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Flip Panel lets you flip between showing a front and back side on of a card.</description>
        <tag-name>flip-panel</tag-name>
        <component>
            <component-type>io.tornadofaces.component.FlipPanel</component-type>
            <renderer-type>io.tornadofaces.component.FlipPanelRenderer</renderer-type>
        </component>
        <attribute>
            <description>Styles to apply to the ul element.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the ul element.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Render flip panel as a box</description>
            <name>box</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Flipping from back to front can either spin in reverse or continue in the same direction. Valid options are "reverse", "continue". Defaults to "reverse".</description>
            <name>mode</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Number of milliseconds for the flip effect. Defaults to 400.</description>
            <name>duration</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Should the panel render the back side?</description>
            <name>flipped</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar. Use this to <code>load()</code> the data or get the data via <code>val()</code>. Note that the Data component must be wrapped in a Form for the load() function to work.]]></description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback when card is flipped</description>
            <name>onFlip</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Grid Block</description>
        <tag-name>grid-block</tag-name>
        <component>
            <component-type>io.tornadofaces.component.GridBlock</component-type>
            <renderer-type>io.tornadofaces.component.GridComponentRenderer</renderer-type>
        </component>
        <attribute>
            <description>Width in the 12 based grid for small devices</description>
            <name>small</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>The orientation decides if the list items are laid out horizontally or vertically. Valid
                options a horizontal and vertical. Default horizontal.
            </description>
            <name>orientation</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Orientation</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for medium devices</description>
            <name>medium</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for large devices</description>
            <name>large</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the ul element.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the ul element.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Grid Frame</description>
        <tag-name>grid-frame</tag-name>
        <component>
            <component-type>io.tornadofaces.component.GridFrame</component-type>
            <renderer-type>io.tornadofaces.component.GridComponentRenderer</renderer-type>
        </component>
        <attribute>
            <description>Width in the 12 based grid for small devices</description>
            <name>small</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for medium devices</description>
            <name>medium</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for large devices</description>
            <name>large</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the ul element.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the ul element.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Grid Component</description>
        <tag-name>grid-content</tag-name>
        <component>
            <component-type>io.tornadofaces.component.GridContent</component-type>
            <renderer-type>io.tornadofaces.component.GridComponentRenderer</renderer-type>
        </component>
        <attribute>
            <description>Width in the 12 based grid for small devices</description>
            <name>small</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for medium devices</description>
            <name>medium</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for large devices</description>
            <name>large</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the ul element.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the ul element.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Tab for Accordion and TabView</description>
        <tag-name>tab</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Tab</component-type>
            <renderer-type>io.tornadofaces.component.AccordionRenderer</renderer-type>
        </component>
        <attribute>
            <description>The title of the tab window. Required unless the title facet is specified.</description>
            <name>title</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the tab div.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Icon will be added as an i with the supplied icon value as a class attribute</description>
            <name>icon</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>GID gives any component a unique id that can be referred to from render and execute statements
            without having to deal with the component hierarchy.
        </description>
        <tag-name>gid</tag-name>
        <handler-class>io.tornadofaces.component.util.GlobalId</handler-class>
        <attribute>
            <description>The value of the globally unique component. Can be refered to as #value from render and execute
                statements of all TornadoFaces components, like CommandButton and CommandLink.
            </description>
            <name>value</name>
            <required>true</required>
            <type>String</type>
        </attribute>
    </tag>
    <tag>
        <description>Form Element</description>
        <tag-name>form-element</tag-name>
        <component>
            <component-type>io.tornadofaces.component.FormElement</component-type>
            <renderer-type>io.tornadofaces.component.FormElementRenderer</renderer-type>
        </component>
        <attribute>
            <description>Label for the form element</description>
            <name>label</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Add padding. Defaults to false.</description>
            <name>padding</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>render</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Prefix label that will be added as a span with class form-label before the input element
            </description>
            <name>prefix</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Suffix label that will be added as a span with class form-label after the input element
            </description>
            <name>suffix</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the wrapper</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the switch.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for small devices</description>
            <name>small</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for medium devices</description>
            <name>medium</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for large devices</description>
            <name>large</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>EXPERIMENTAL/WORK IN PROGRESS! Input tag handler that that will create an input element wrapped in a Form Element</description>
        <tag-name>input</tag-name>
        <handler-class>io.tornadofaces.component.input.Input</handler-class>
        <attribute>
            <description>Label for the form element</description>
            <name>label</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Placeholder for the input element</description>
            <name>placeholder</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Type of input element. Valid values are "text", "textarea", "password". Defaults to "text".</description>
            <name>type</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Prefix label that will be added as a span with class form-label before the input element
            </description>
            <name>prefix</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Suffix label that will be added as a span with class form-label after the input element
            </description>
            <name>suffix</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the wrapper</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the input</description>
            <name>inputStyleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for small devices</description>
            <name>small</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for medium devices</description>
            <name>medium</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Width in the 12 based grid for large devices</description>
            <name>large</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>The configure tag lets a Java method configure any UIComponent.</description>
        <tag-name>configure</tag-name>
        <handler-class>io.tornadofaces.component.util.Configure</handler-class>
        <attribute>
            <description>The method expression representing the method that will be passed the parent UIComponent as
                it's only argument. The method must accept the exact UIComponent type.
            </description>
            <name>with</name>
            <required>true</required>
            <type>String</type>
        </attribute>
    </tag>
    <tag>
        <description>
            <![CDATA[Data is a Client Side JSON prefetcher, that makes it easy to provide JSON data that is available at render time. The data can also be loaded via <code>Widget.load()</code> at a later time. There is optionally also a callback available on load.]]></description>
        <tag-name>data</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Data</component-type>
            <renderer-type>io.tornadofaces.component.DataRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value expression that will be rendered as a JavaScript object</description>
            <name>value</name>
            <required>true</required>
        </attribute>
        <attribute>
            <description>
                <![CDATA[The client side variable name of the resulting object. Can be left blank if you intend to access the data via <code>Widget.val()</code> only.]]></description>
            <name>var</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The value will be rendered as a JSON object. Default true.</description>
            <name>json</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[A lazy Data object can be retrieved via a call to <code>Widget.load()</code>.]]></description>
            <name>lazy</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Client callback that will be called when the data is available or reloaded. The first argument
                is the data itself, the other is a boolean indicating wether this was the initial load or not.
            </description>
            <name>success</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>
                <![CDATA[Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar. Use this to <code>load()</code> the data or get the data via <code>val()</code>. Note that the Data component must be wrapped in a Form for the load() function to work.]]></description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
    </tag>
    <tag>
        <description>Date Picker based on pickaday.js</description>
        <tag-name>datepicker</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Datepicker</component-type>
            <renderer-type>io.tornadofaces.component.DatepickerRenderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar.]]></description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Client side format. Server side format is set via the converter.</description>
            <name>format</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Preferred position of the datepicker relative to the form field, e.g.: top right, bottom,
                right. Note: automatic adjustment may occur to avoid datepicker from being displayed outside the
                viewport, see positions example (default to 'bottom left')
            </description>
            <name>position</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>can be set to false to not reposition datepicker within the viewport, forcing it to take the
                configured position (default: true)
            </description>
            <name>reposition</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>DOM node to render calendar into, see container example (default: undefined)</description>
            <name>container</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>First day of the week (0: Sunday, 1: Monday, etc)</description>
            <name>firstDay</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Callback function for when a date is selected</description>
            <name>onSelect</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Use a different element to trigger opening the datepicker, see trigger example (default to
                field)
            </description>
            <name>trigger</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Color Picker based on spectrum.js</description>
        <tag-name>colorpicker</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Colorpicker</component-type>
            <renderer-type>io.tornadofaces.component.ColorpickerRenderer</renderer-type>
        </component>
        <attribute>
            <description>
                <![CDATA[Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar.]]></description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Flat means that it will always show up at full size, and be positioned as an inline-block element.</description>
            <name>flat</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Show the text input field next to the color picker dropdown. Defaults to true.</description>
            <name>showTextField</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>You can add an input to allow free form typing inside the popup. Defaults to true.</description>
            <name>showInput</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Allow alpha transparency selection. Defaults to false.</description>
            <name>showAlpha</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Disable input/color change. Defaults to false.</description>
            <name>disabled</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Spectrum can show a palette below the colorpicker to make it convenient for users to choose from frequently or recently used colors. When the colorpicker is closed, the current color will be added to the palette if it isn't there already. Add list of colors representing each row via the palette attribute. Defaults to false.</description>
            <name>showPalette</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Show the palettes you specify, and nothing else. Defaults to false.</description>
            <name>showPaletteOnly</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Spectrum can show a button to toggle the colorpicker next to the palette. This way, the user can choose from a limited number of colors in the palette, but still be able to pick a color that's not in the palette. The default value for togglePaletteOnly is false. Set it to true to enable the Toggle button. You can also change the text on the Toggle Button with the options togglePaletteMoreText (default is "more") and togglePaletteLessText (default is "less").</description>
            <name>togglePaletteOnly</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Spectrum can keep track of what has been selected by the user with the showSelectionPalette option. If the localStorageKey option is defined, the selection will be saved in the browser's localStorage object. Defaults to true.</description>
            <name>showSelectionPalette</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>The default values inside of the selection palette, as a list of Strings. Make sure that showSelectionPalette and showPalette are both enabled. If a localStorageKey is defined, then this value will be overwritten by it.</description>
            <name>selectionPalette</name>
            <required>false</required>
            <type>List&lt;String&gt;</type>
        </attribute>
        <attribute>
            <description>The number of elements allowed in the selectionPalette at any given time. Elements will be removed from the palette in first in - first out order if this limit is reached.</description>
            <name>maxSelectionSize</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>You can have the colorpicker automatically hide after a palette color is selected. Defaults to false.</description>
            <name>hideAfterPaletteSelect</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>When clicking outside of the colorpicker, you can force it to fire a change event rather than having it revert the change. Defaults to true.</description>
            <name>clickoutFiresChange</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Spectrum can show the color that was initially set when opening. This provides an easy way to click back to what was set when opened. Defaults to false.</description>
            <name>showInitial</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Allows for selecting an empty color. Defaults to false.</description>
            <name>allowEmpty</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Show buttons in selection dialog. Defaults to true.</description>
            <name>showButtons</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Cancel button text. Defaults to 'cancel'</description>
            <name>cancelText</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback on change. The callback gets the selected color as the sole argument.</description>
            <name>onChange</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Add an additional class name to the container element.</description>
            <name>containerClassName</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Add an additional class name to the replacer element.</description>
            <name>replacerClassName</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>You can set the format that is displayed in the text box. Valid options are 'hex', 'hex3', 'hsl', 'rgb', 'name'. Defaults to 'hex'</description>
            <name>preferredFormat</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Choose button text. Defaults to 'choose'</description>
            <name>chooseText</name>
            <required>false</required>
            <type>String</type>
        </attribute>

    </tag>
    <tag>
        <description>
            <![CDATA[Range Slider based on <a href="http://refreshless.com/nouislider/">noUiSlider</a> with support for two slider values and lots of options. Can be programatially configured via the <a href="http://tornadofaces.io/docs/configure/">TornadoFaces configure tag</a> to keep your markup free for business logic.]]></description>
        <tag-name>slider</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Slider</component-type>
            <renderer-type>io.tornadofaces.component.SliderRenderer</renderer-type>
        </component>
        <attribute>
            <description>Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar.
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Show a header containing min, max and value labels above the slider. Defaults to false.
            </description>
            <name>header</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Name of a JavaScript function that will be called to format the header labels for min, max and value.
            </description>
            <name>labelFormatter</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Arbitrary data you can connect to your component, for example for retrieval by the configure
                tag or other custom business logic
            </description>
            <name>data</name>
            <required>false</required>
            <type>Object</type>
        </attribute>
        <attribute>
            <description>Alias for lower</description>
            <name>value</name>
            <required>false</required>
            <type>Number</type>
        </attribute>
        <attribute>
            <description>Client id of input element that will be kept in sync with the lower track value</description>
            <name>lowerTarget</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Client id of input element that will be kept in sync with the upper track value</description>
            <name>upperTarget</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The position of the lower (or only) slider</description>
            <name>lower</name>
            <required>true</required>
            <type>Number</type>
        </attribute>
        <attribute>
            <description>The position of the upper (the optional, second) slider</description>
            <name>upper</name>
            <required>false</required>
            <type>Number</type>
        </attribute>
        <attribute>
            <description>Configuration for non-linear stepping. Must be set programmatically, prefereably via the
                configure tag.
            </description>
            <name>range</name>
            <required>false</required>
            <type>List&lt;SliderRangeValue&gt;</type>
        </attribute>
        <attribute>
            <description>The connect setting can be used to control the bar between the handles, or the edges of the
                slider. Use "lower" to connect to the lower side, or "upper" to connect to the upper side. Setting true
                sets the bar between the handles.
            </description>
            <name>connect</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>When using two handles, the minimum distance between the handles can be set using the margin
                option. The margin value is relative to the value set in 'range'. This option is only available on
                standard linear sliders.
            </description>
            <name>margin</name>
            <required>false</required>
            <type>Number</type>
        </attribute>
        <attribute>
            <description>The limit option is the oposite of the margin option, limiting the maximum distance between two
                handles. As with the margin option, the limit option can only be used on linear sliders.
            </description>
            <name>limit</name>
            <required>false</required>
            <type>Number</type>
        </attribute>
        <attribute>
            <description>By default, the slider slides fluently. In order to make the handles jump between intervals,
                you can use this option. The step option is relative to the values provided to range.
            </description>
            <name>step</name>
            <required>false</required>
            <type>Number</type>
        </attribute>
        <attribute>
            <description>The orientation setting can be used to set the slider to "vertical" or "horizontal". Set
                dimensions! Vertical sliders don't assume a default height, so you'll need to set one. You can use any
                unit you want, including % or px.
            </description>
            <name>orientation</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>By default the sliders are top-to-bottom and left-to-right, but you can change this using the
                direction option, which decides where the upper side of the slider is.
            </description>
            <name>direction</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback on slider value changed</description>
            <name>onSlide</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Set the animate option to false to prevent the slider from animating to a new value with when
                calling .val().
            </description>
            <name>animate</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Switches are toggle element that switch between an Off and On state on tap or click. A switch is
            backed by a checkbox input.
        </description>
        <tag-name>switch</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Switch</component-type>
            <renderer-type>io.tornadofaces.component.SwitchRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value</description>
            <name>value</name>
            <required>false</required>
        </attribute>
        <attribute>
            <description>Styles to apply to the switch.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the switch.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The size of the button: valid options are small, large. No value means default/medium.
            </description>
            <name>size</name>
            <required>false</required>
        </attribute>
        <attribute>
            <description>JavaScript callback when switch is flipped</description>
            <name>onChange</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar.
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Progress Bar</description>
        <tag-name>progress</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Progress</component-type>
            <renderer-type>io.tornadofaces.component.ProgressRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value of the progress bar</description>
            <name>value</name>
            <required>false</required>
        </attribute>
        <attribute>
            <description>Max</description>
            <name>max</name>
            <required>false</required>
        </attribute>
        <attribute>
            <description>Priority. Represent different colors. high, medium, low</description>
            <name>priority</name>
            <required>false</required>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Accordion presents contents in vertical tabs.</description>
        <tag-name>accordion</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Accordion</component-type>
            <renderer-type>io.tornadofaces.component.AccordionRenderer</renderer-type>
        </component>
        <attribute>
            <description>Arbitrary data you can connect to your component, for example for retrieval by the configure
                tag or other custom business logic
            </description>
            <name>data</name>
            <required>false</required>
            <type>Object</type>
        </attribute>
        <attribute>
            <description>Multi open support. If true, items will toggle open/close status when clicked, and
                other items are not closed when you open a new item.
            </description>
            <name>multi</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Controls if it is possible to close an item without opening any other item.</description>
            <name>collapsible</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Index to open by default. If multi=true, activeIndex can be a comma separated list of indexes
                to open. Default 0.
            </description>
            <name>activeIndex</name>
            <required>false</required>
            <type>Integer or String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback to be executed when a user opens an item.</description>
            <name>onTabChange</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar.
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>If tab items are lazy loaded, cache=true will make sure each item content is only retrieved
                once. cache=false will retrieve and refresh the content every time the item is shown. Default true.
            </description>
            <name>cache</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>AutoOpen will open the items denoted in activeIndex when the component is rendered. Default
                true.
            </description>
            <name>autoOpen</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Dynamic items will have it's contents lazy loaded when the item is actived. Default false.
            </description>
            <name>dynamic</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the accordion div.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>A datadriven list component that can accommodate a variety of styles and controls.</description>
        <tag-name>list</tag-name>
        <component>
            <component-type>io.tornadofaces.component.List</component-type>
            <renderer-type>io.tornadofaces.component.ListRenderer</renderer-type>
        </component>
        <attribute>
            <description>Styles to apply to the list section.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>A title to be displayed as the list header.</description>
            <name>title</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>A JavaScript function to filter the list when widget.filter() is called. The function is called
                with each item in the list
            </description>
            <name>filterFn</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The List of elements, as a value expression.</description>
            <name>value</name>
            <required>true</required>
            <type>java.util.List</type>
        </attribute>
        <attribute>
            <description>Highlight text in filtered elements. Default true.</description>
            <name>highlightFilter</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>The variable that will refer to each element in the list. Defaults to "it"</description>
            <name>var</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>FilterFor adds a filtering capabilities for the given widget to the given target component, like an
            input field.
        </description>
        <tag-name>filterFor</tag-name>
        <component>
            <component-type>io.tornadofaces.component.FilterFor</component-type>
            <renderer-type>io.tornadofaces.component.FilterForRenderer</renderer-type>
        </component>
        <attribute>
            <description>The widgetVar that will have it's filter() method called with the input text as argument.
            </description>
            <name>widget</name>
            <required>true</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The target component id</description>
            <name>target</name>
            <required>true</required>
            <type>String</type>
        </attribute>
    </tag>
    <tag>
        <description>Unordered List is a standard ul element that can have it's own id, determine rendered state and optionally be laid out horizontally. App authors should add their own styles to this component.</description>
        <tag-name>ul</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Ul</component-type>
            <renderer-type>io.tornadofaces.component.UlRenderer</renderer-type>
        </component>
        <attribute>
            <description>The orientation decides if the list items are laid out horizontally or vertically. Valid
                options a horizontal and vertical. Default horizontal.
            </description>
            <name>orientation</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Orientation</type>
        </attribute>
        <attribute>
            <description>Icons, if added, are by default positioned above the text. However, this can be changed by
                setting this property to left, right or bottom. Default top.
            </description>
            <name>iconPosition</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Position</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the ul element.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the ul element.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The menu bar can be recolored to be dark, or match your primary color. Valid options are dark,
                primary. Default none.
            </description>
            <name>color</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Color</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Context Menu with dynamic capabilities, attaches as context menu to any DOM element and can be invoked via the Widget API.</description>
        <tag-name>context-menu</tag-name>
        <component>
            <component-type>io.tornadofaces.component.ContextMenu</component-type>
            <renderer-type>io.tornadofaces.component.ContextMenuRenderer</renderer-type>
        </component>
        <attribute>
            <description>Style classes to apply to the menu element.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Breadcrumbs is used to visualize the current navigation position.</description>
        <tag-name>breadcrumbs</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Breadcrumbs</component-type>
            <renderer-type>io.tornadofaces.component.UlRenderer</renderer-type>
        </component>
        <attribute>
            <description>Icons, if added, are by default positioned left of the text. However, this can be changed by
                setting this property to left, right or bottom. Default left.
            </description>
            <name>iconPosition</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Position</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the ul element.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the ul element.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The bar can be recolored to be dark, or match your primary color. Valid options are dark, primary. Default none.</description>
            <name>color</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Color</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Menu bar gives you the ability to switch between different subtasks, views, or modes in an app. It can be used vertically or horizontally.</description>
        <tag-name>menubar</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Menubar</component-type>
            <renderer-type>io.tornadofaces.component.UlRenderer</renderer-type>
        </component>
        <attribute>
            <description>Icons, if added, are by default positioned left of the text. However, this can be changed by
                setting this property to left, right or bottom. Default left.
            </description>
            <name>iconPosition</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Position</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the ul element.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the ul element.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The bar can be recolored to be dark, or match your primary color. Valid options are dark, primary. Default none.</description>
            <name>color</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Color</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            Sidebar typically acts as the main menu for an application. It can be placed to the left or right of the screen. It supports mobile mode, show/hide, iconify-mode, multi level menu items.</description>
        <tag-name>sidemenu</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Sidemenu</component-type>
            <renderer-type>io.tornadofaces.component.SidemenuRenderer</renderer-type>
        </component>
        <attribute>
            <description>Icons, if added, are by default positioned to the left the text. Valid options are "top", "right", "bottom", "left".
            </description>
            <name>iconPosition</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Position</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the ul element.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the ul element.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The menu bar can be recolored to be dark, or match your primary color. Valid options are dark,
                primary. Default none.
            </description>
            <name>color</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Color</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>A navigational component which can display the current screen the user is on, along with additional
            controls or menu items.
        </description>
        <tag-name>titleBar</tag-name>
        <component>
            <component-type>io.tornadofaces.component.TitleBar</component-type>
            <renderer-type>io.tornadofaces.component.TitleBarRenderer</renderer-type>
        </component>
        <attribute>
            <description>Styles to apply to the title bar div.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The title. Can optionally be set via the title facet.</description>
            <name>title</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the title bar div.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Position of the title element. Valid options are left, right, center. Default center.
            </description>
            <name>titlePosition</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Position</type>
        </attribute>
        <attribute>
            <description>Color of the title bar. Valid options are dark, primary. Default none.</description>
            <name>color</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The card title is rendered in a divider.</description>
            <name>title</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>List Element used by ul and list components. Supports automatic link wrapping and conditional
            active state with configurable active class.
        </description>
        <tag-name>li</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Li</component-type>
            <renderer-type>io.tornadofaces.component.LiRenderer</renderer-type>
        </component>
        <attribute>
            <description>The value will be converted to the HTML of the li tag. You an optionally add children to the li
                instead, or in combination with this attribute.
            </description>
            <name>value</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the list section.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Icon will be added as an i with the supplied icon value as a class attribute</description>
            <name>icon</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Style class for active items. Defaults to "is-active".</description>
            <name>activeClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Active state. If true, activeClass will be added to the li. If link is set but no active
                attribute is given, active will return true if the viewId starts with the link attribute value.
            </description>
            <name>active</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Title list elements display as a header for subsequent list items.</description>
            <name>title</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Will wrap the contents of this li in an anchor with href set to the this property value.
            </description>
            <name>link</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>If the li is inside a list, chevron=true will render a chevron to the right of the list entry,
                indicating that it is clickable and has a navigation target. Default false.
            </description>
            <name>chevron</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Panels are frames that slide in from the top, left, bottom, or right of the screen and appear over
            the interface.
        </description>
        <tag-name>panel</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Panel</component-type>
            <renderer-type>io.tornadofaces.component.PanelRenderer</renderer-type>
        </component>
        <attribute>
            <description>Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar.
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the panel div.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the panel div.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Set open true if you want the panel to open immediately.</description>
            <name>open</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Non closable panels cannot be closed once the are opened. Default true.</description>
            <name>closable</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Position of the window. Valid values are "top", "right", "left" and "right". Default "top".
            </description>
            <name>position</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Position</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>A card is a rectangular container that holds your content, makes it easy to digest, and separates
            it from other similar content.
        </description>
        <tag-name>card</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Card</component-type>
            <renderer-type>io.tornadofaces.component.CardRenderer</renderer-type>
        </component>
        <attribute>
            <description>Customize your card with colors. Valid options are dark, primary, success, warning, alert.
            </description>
            <name>color</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The card title is rendered in a divider.</description>
            <name>title</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the card div</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>An alert that pins to the corner of the screen when triggered by JavaScript. It can be set to
            disappear after a certain period of time, or to stay put until the user clicks on it.
        </description>
        <tag-name>notification</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Notification</component-type>
            <renderer-type>io.tornadofaces.component.NotificationRenderer</renderer-type>
        </component>
        <attribute>
            <description>The timeout in milliseconds for the notification to stay visible. Set to 0 for a sticky
                notification.
            </description>
            <name>timeout</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>The position of the notification. Valid values are "top-right", "bottom-right", "bottom-left"
                and "top-left". Default "top-right".
            </description>
            <name>position</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Non closable notifications cannot be closed by the user once the are visible, but will
                dissapear when the timeout is reached, or never if timeout is 0. Default true.
            </description>
            <name>closable</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar.
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Messages that can be shown from either server or client. It can be set to disappear after a certain
            period of time, or to stay put until the user closes it.
        </description>
        <tag-name>message</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Message</component-type>
            <renderer-type>io.tornadofaces.component.MessageRenderer</renderer-type>
        </component>
        <attribute>
            <description>Styles to apply to the message div.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The timeout in milliseconds for the message to stay visible. Defaults to 0 for a sticky
                message.
            </description>
            <name>timeout</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Non closable notifications cannot be closed by the user once the are visible, but will
                dissapear when the timeout is reached, or never if timeout is 0. Defaults to false.
            </description>
            <name>closable</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar.
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Action sheets can be triggered in your app view to providing contextual actions on a component.
            They act as slide up menus on small devices and drop downs on larger screens.
        </description>
        <tag-name>actionsheet</tag-name>
        <component>
            <component-type>io.tornadofaces.component.ActionSheet</component-type>
            <renderer-type>io.tornadofaces.component.ActionSheetRenderer</renderer-type>
        </component>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Modal dialogs, or pop-up windows, are handy for prototyping and production. It focuses the user on
            the modal content. You can add images, links, and even a grid inside.
        </description>
        <tag-name>modal</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Modal</component-type>
            <renderer-type>io.tornadofaces.component.ModalRenderer</renderer-type>
        </component>
        <attribute>
            <description>Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar.
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The title of the modal window. If present, a title bar will be rendered at the top of the modal dialog.</description>
            <name>title</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the modal div.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>CSS Styles applied to the modal div.</description>
            <name>style</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Set open true if you want the modal to open immediately.</description>
            <name>open</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Color of the modal. Valid values are "primary", "dark" and none. Default "primary".
            </description>
            <name>color</name>
            <type>io.tornadofaces.component.common.Color</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>The TabView presents contents in vertical or horizontal tabs.</description>
        <tag-name>tabView</tag-name>
        <component>
            <component-type>io.tornadofaces.component.TabView</component-type>
            <renderer-type>io.tornadofaces.component.TabViewRenderer</renderer-type>
        </component>
        <attribute>
            <description>Orientation for the tab view. Possible values are "horizontal" (default) and "vertical"
            </description>
            <name>orientation</name>
            <type>io.tornadofaces.component.tab.TabView.Orientation</type>
        </attribute>
        <attribute>
            <description>Index to open by default. If multi=true, activeIndex can be a comma separated list of indexes
                to open. Default 0.
            </description>
            <name>activeIndex</name>
            <required>false</required>
            <type>Integer or String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback to be executed when a user opens an item.</description>
            <name>onItemChange</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Widget variable name, accessible via TW('widgetVar') and TornadoFaces.widgets.widgetVar.
            </description>
            <name>widgetVar</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>If tab items are lazy loaded, cache=true will make sure each item content is only retrieved
                once. cache=false will retrieve and refresh the content every time the item is shown. Default true.
            </description>
            <name>cache</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>AutoOpen will open the items denoted in activeIndex when the component is rendered. Default
                true.
            </description>
            <name>autoOpen</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Dynamic items will have it's contents lazy loaded when the item is actived. Default false.
            </description>
            <name>dynamic</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the tab view div.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the content div.</description>
            <name>contentsStyleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>
            Command Link has some convenient improvements over the default JSF commandLink, including AJAX by default,
            automatic spinner, double submission protection, AJAX event callbacks and attributes for render and execute.
        </description>
        <tag-name>commandLink</tag-name>
        <component>
            <component-type>io.tornadofaces.component.CommandLink</component-type>
            <renderer-type>io.tornadofaces.component.ButtonRenderer</renderer-type>
        </component>
        <attribute>
            <description>The action to call when the button is clicked</description>
            <name>action</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The action listener to call when the button is clicked</description>
            <name>actionListener</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Invoke the action in the Apply Request Values phase. Defaults to false.</description>
            <name>immedate</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the link.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Icon for the button, rendered as i tag with icon class</description>
            <name>icon</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Value expression for the value binding</description>
            <name>value</name>
            <required>false</required>
            <type>Object</type>
        </attribute>
        <attribute>
            <description>Size of the button. Valid values are "tiny", "small", "large"</description>
            <name>size</name>
            <type>io.tornadofaces.component.button.CommandLink.Size</type>
        </attribute>
        <attribute>
            <description>Determines the spinner animation style. Valid options are "expand-left", "expand-right",
                "expand-up", "expand-down", "contract", "contract-overlay", "zoom-in", "zoom-out", "slide-left",
                "slide-right", "slide-up", "slide-down". Defaults to "slide-left".
            </description>
            <name>spinnerStyle</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Determines the color of the spinner. Valid options are any hex code or named CSS color.
            </description>
            <name>spinnerColor</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>pixel dimensions of spinner, defaults to dynamic size based on the button height.</description>
            <name>spinnerSize</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Should this link render as a button? Defaults to false.</description>
            <name>button</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Hollow buttons have outline and no background color. Default false.</description>
            <name>hollow</name>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Space separated list of components to render after ajax.</description>
            <name>render</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space separated list of components to execute on ajax.</description>
            <name>execute</name>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Color of the button. Valid values are "success", "secondary", "alert", "info"</description>
            <name>color</name>
            <type>io.tornadofaces.component.common.Color</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered before the AJAX request is sent</description>
            <name>oncomplete</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered after AJAX response has arrived</description>
            <name>oncomplete</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered after DOM update based on AJAX request</description>
            <name>onsuccess</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Expand to fill horizontal space</description>
            <name>expand</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Command Button has some convenient improvements over the default JSF commandButton, including AJAX
            by default, automatic spinner, double submission protection, AJAX event callbacks and attributes for render
            and execute.
        </description>
        <tag-name>commandButton</tag-name>
        <component>
            <component-type>io.tornadofaces.component.CommandButton</component-type>
            <renderer-type>io.tornadofaces.component.ButtonRenderer</renderer-type>
        </component>
        <attribute>
            <description>The action to call when the button is clicked</description>
            <name>action</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The action listener to call when the button is clicked</description>
            <name>actionListener</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Invoke the action in the Apply Request Values phase. Defaults to false.</description>
            <name>immedate</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Icon for the button, rendered as i tag with icon class</description>
            <name>icon</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Styles to apply to the button.</description>
            <name>styleClass</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Value expression for the value binding</description>
            <name>value</name>
            <required>false</required>
            <type>Object</type>
        </attribute>
        <attribute>
            <description>Size of the button. Valid values are "tiny", "small", "large"</description>
            <name>size</name>
            <required>false</required>
            <type>io.tornadofaces.component.button.CommandLink.Size</type>
        </attribute>
        <attribute>
            <description>Determines the spinner animation style. Valid options are "expand-left", "expand-right",
                "expand-up", "expand-down", "contract", "contract-overlay", "zoom-in", "zoom-out", "slide-left",
                "slide-right", "slide-up", "slide-down". Defaults to "expand-right".
            </description>
            <name>spinnerStyle</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Determines the color of the spinner. Valid options are any hex code or named CSS color.
            </description>
            <name>spinnerColor</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>pixel dimensions of spinner, defaults to dynamic size based on the button height.</description>
            <name>spinnerSize</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Hollow buttons have outline and no background color. Default false.</description>
            <name>hollow</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Should this button render as input type="submit" or button type="submit". Defaults to false,
                which renders a button element.
            </description>
            <name>input</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Space separated list of components to render after ajax. Default "@form".</description>
            <name>render</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space separated list of components to execute on ajax. Default "@form".</description>
            <name>execute</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Color of the button. Valid values are "success", "secondary", "alert", "info"</description>
            <name>color</name>
            <required>false</required>
            <type>io.tornadofaces.component.common.Color</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered before the AJAX request is sent</description>
            <name>oncomplete</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered after AJAX response has arrived</description>
            <name>oncomplete</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered after DOM update based on AJAX request</description>
            <name>onsuccess</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Expand to fill horizontal space</description>
            <name>expand</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Command provides a simple way to execute backing bean methods with javascript.</description>
        <tag-name>command</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Command</component-type>
            <renderer-type>io.tornadofaces.component.CommandRenderer</renderer-type>
        </component>
        <attribute>
            <description>The name of the client method that will execute the action.</description>
            <name>name</name>
            <required>true</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Execute the action on DOM load. Defaults to false.</description>
            <name>onload</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>The action to call when the command is invoked</description>
            <name>action</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>The action listener to call when the command is invoked</description>
            <name>actionListener</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Invoke the action in the Apply Request Values phase. Defaults to false.</description>
            <name>immedate</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>Space separated list of components to render after ajax. Default "@form".</description>
            <name>render</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space separated list of components to execute on ajax. Default "@form".</description>
            <name>execute</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered before the AJAX request is sent</description>
            <name>oncomplete</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered after AJAX response has arrived</description>
            <name>oncomplete</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered after DOM update based on AJAX request</description>
            <name>onsuccess</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <description>Poll lets you repeat a server action on a set interval with an optional delay before the first call is made. The Widget API provides methods to stop and start the poller as well.</description>
        <tag-name>poll</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Poll</component-type>
            <renderer-type>io.tornadofaces.component.PollRenderer</renderer-type>
        </component>
        <attribute>
            <description>The number of milliseconds between each poll call.</description>
            <name>interval</name>
            <required>true</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>The number of milliseconds before the first poll call.</description>
            <name>delay</name>
            <required>false</required>
            <type>Integer</type>
        </attribute>
        <attribute>
            <description>Start the poller, optionally after the specified delay on DOM load. Defaults to true.</description>
            <name>onload</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
        <attribute>
            <description>The action to call every time while interval is reached</description>
            <name>action</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Space separated list of components to render after ajax. Defaults to null".</description>
            <name>render</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>Space separated list of components to execute on ajax. Default "@this".</description>
            <name>execute</name>
            <required>false</required>
            <type>java.lang.String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered before the AJAX request is sent</description>
            <name>oncomplete</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered after AJAX response has arrived</description>
            <name>oncomplete</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>JavaScript callback triggered after DOM update based on AJAX request</description>
            <name>onsuccess</name>
            <required>false</required>
            <type>String</type>
        </attribute>
        <attribute>
            <description>Should this component be rendered?</description>
            <name>rendered</name>
            <required>false</required>
            <type>Boolean</type>
        </attribute>
    </tag>
    <tag>
        <tag-name>script</tag-name>
        <component>
            <component-type>io.tornadofaces.component.Script</component-type>
            <renderer-type>io.tornadofaces.component.ScriptRenderer</renderer-type>
        </component>
    </tag>
</facelet-taglib>